{
  "root": true,
  "env": { "node": true },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "tsconfig.json",
    "ecmaVersion": 2018, // Allows for the parsing of modern ECMAScript features
    "sourceType": "module" // Allows for the use of imports
  },
  "settings": { "typescript": { "alwaysTryTypes": true } },
  "ignorePatterns": ["@types/"],
  "plugins": ["@typescript-eslint", "prettier"],
  "extends": [
    "airbnb-typescript/base",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "rules": {
    "curly": ["error", "multi-line"],

    "import/prefer-default-export": "off",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": false,
        "optionalDependencies": false,
        "peerDependencies": false,
        "bundledDependencies": false
      }
    ],
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "unknown",
          "parent",
          "sibling",
          "index"
        ],
        "pathGroupsExcludedImportTypes": ["builtin"],
        "newlines-between": "always"
      }
    ],

    "no-continue": "off",
    "no-underscore-dangle": [
      "error",
      { "allow": ["__typename", "_dbp"], "allowAfterThis": true }
    ],
    "no-param-reassign": [
      "error",
      { "props": true, "ignorePropertyModificationsFor": ["ref"] }
    ],
    "no-restricted-syntax": [
      "error",
      "ForInStatement",
      "LabeledStatement",
      "WithStatement"
    ],

    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "after-used",
        "ignoreRestSiblings": true,
        "argsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-use-before-define": ["error", "nofunc"],
    "@typescript-eslint/camelcase": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"]
      },
      {
        "selector": "function",
        "format": ["camelCase"]
      },
      {
        "selector": "parameter",
        "filter": {
          "regex": "Props$",
          "match": true
        },
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "property",
        "filter": {
          "regex": "Props$",
          "match": true
        },
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "parameter",
        "filter": {
          "regex": "Props$",
          "match": false
        },
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },

      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "enum",
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "typeParameter",
        "filter": "[a-zA-Z0-9]+_[a-zA-Z0-9]+",
        "custom": {
          "regex": "([a-z]+[A-Z]+\\w+)+_([a-z]+[A-Z]+\\w+)+",
          "match": true
        },
        "format": null
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      }
    ]
  }
}
